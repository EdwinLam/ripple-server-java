// buildscript中的声明是gradle脚本自身需要使用的资源
buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
        //添加maven仓库 mybatis-generetor
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework:springloaded:1.2.7.RELEASE'
        // mybatis-generator 插件路径
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}

//引入 mybatis-generator 插件
apply plugin: "com.arenagod.gradle.MybatisGenerator"

//配置从阿里云源下载依赖
allprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'//应用依赖管理插件
    apply plugin: 'maven'
    group = 'com.ripple'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    apply plugin: 'war'// war可以将开发的应用打包成部署包
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        mavenCentral()
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.warnings = false
    }
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-security')
        compile('org.springframework.boot:spring-boot-starter-aop')
        compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
        compile('org.springframework.boot:spring-boot-starter-actuator')

        runtime('mysql:mysql-connector-java')
        providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
        compile project(':ripple-server-entity')
        compile fileTree(dir: 'libs', include: ['*.jar'])
        // 数据库连接池
        compile('com.alibaba:druid:1.1.4')
        // Mysql Connector
//        compile('mysql:mysql-connector-java:5.1.44')
        // JWT
        compile('io.jsonwebtoken:jjwt:0.9.0')
        // JPA
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        // MybatisPlus
        compile('com.baomidou:mybatis-plus-boot-starter:2.2.0')
        // Redis
        compile('org.springframework.boot:spring-boot-starter-redis:1.4.7.RELEASE')
        // Swagger API文档
        compile('io.springfox:springfox-swagger-ui:2.7.0')
        compile('io.springfox:springfox-swagger2:2.7.0')
        // Hutool工具包
        compile('cn.hutool:hutool-all:4.0.5')
        // Gson
        compile('com.google.code.gson:gson:2.8.2')
        // 七牛图片上传SDK
        compile('com.qiniu:qiniu-java-sdk:[7.2.0, 7.2.99]')
        // Lombok
        compile('org.projectlombok:lombok:1.16.20')
        // Jasypt加密
        compile('com.github.ulisesbocchio:jasypt-spring-boot-starter:1.18')
        // Beet代码生成
        compile('com.ibeetl:beetl:2.8.3')
        // 热更新
        compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
    }
}


/** 子项目配置 */
subprojects {
    dependencies {
        // 加载libs目录下所有的jar
        compile fileTree(dir: 'libs', include: ['*.jar'])
    }

    //生成源码jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
    }

    /** 有时候会报错，但需要执行 */
    task createREADME() {
        file("README.md").createNewFile()
    }

    //上传maven仓库
    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repo.qtonecloud.cn/content/repositories/snapshots/") {
                    authentication(userName: "deployment", password: "jlusoft!123")
                }
                repository(url: "http://repo.qtonecloud.cn/content/repositories/releases/") {
                    authentication(userName: "deployment", password: "jlusoft!123")
                }
            }
        }
    }


}


configurations {
    providedRuntime
    mybatisGenerator
}



// mybatis-generator.xml 配置路径
mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/mybatis/generator.xml'
}
